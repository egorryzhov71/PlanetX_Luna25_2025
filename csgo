import telebot
import requests
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

bot = telebot.TeleBot('8186254854:AAHuaB_T2LbRlCXoDvihBVC_PM_j109JcoM')
API_KEY = '823828c9-dddb-4dfb-996a-ec22a8fd69b5'

headers = {
    "Authorization": f"Bearer {API_KEY}"
}

user_nicknames = {}
def get_player_stats(nickname, map_name=None):
    url = f"https://open.faceit.com/data/v4/players?nickname={nickname}"
    res = requests.get(url, headers=headers)
    if res.status_code != 200:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞: {res.status_code}"

    data = res.json()
    player_id = data.get("player_id")
    if not player_id:
        return None, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."

    game_id = 'cs2'
    stats_url = f'https://open.faceit.com/data/v4/players/{player_id}/stats/{game_id}'

    stats_res = requests.get(stats_url, headers=headers)
    if stats_res.status_code != 200:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_res.status_code}"

    stats = stats_res.json()

    try:
        elo = data["games"]["cs2"]["faceit_elo"]
    except KeyError:
        elo = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ELO"

    if not map_name or map_name == "overall":
        try:
            kd_ratio = stats["lifetime"]["Average K/D Ratio"]
            matches = stats["lifetime"]["Matches"]
            winrate = stats["lifetime"]["Win Rate %"]
            utility_damage = stats["lifetime"]["Utility Damage per Round"]
            return {
                "elo": elo,
                "kd_ratio": kd_ratio,
                "matches": matches,
                "winrate": winrate,
                "utility_damage": utility_damage,
                "nickname": nickname,
                "map": "–û–±—â–∞—è"
            }, None
        except KeyError:
            return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."

    else:
        maps_stats = [seg for seg in stats.get("segments", []) if seg.get("type") == "Map"]
        for segment in maps_stats:
            if segment.get("label", "").lower() == map_name.lower():
                stats_map = segment.get("stats", {})
                try:
                    kd_ratio = stats_map.get("Average K/D Ratio", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    matches = stats_map.get("Matches", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    winrate = stats_map.get("Win Rate %", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    utility_damage = stats_map.get("Utility Damage per Round", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    return {
                        "elo": elo,
                        "kd_ratio": kd_ratio,
                        "matches": matches,
                        "winrate": winrate,
                        "utility_damage": utility_damage,
                        "nickname": nickname,
                        "map": segment.get("label")
                    }, None
                except KeyError:
                    return None, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–µ {map_name}."

        return None, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ '{map_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º Faceit')

@bot.message_handler(content_types=['text'])
def map(message):
    nickname = message.text.strip()
    user_nicknames[message.chat.id] = nickname
    markup = types.InlineKeyboardMarkup()
    markup.add(
    InlineKeyboardButton("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_overall"),
        InlineKeyboardButton("Mirage", callback_data="map_mirage"),
        InlineKeyboardButton("Dust II", callback_data="map_dust2"),
        InlineKeyboardButton("Inferno", callback_data="map_inferno"),
        InlineKeyboardButton("Ancient", callback_data="map_ancient"),
        InlineKeyboardButton("Anubis", callback_data="map_anubis"),
        InlineKeyboardButton("Nuke", callback_data="map_nuke"),
        InlineKeyboardButton("Train", callback_data="map_train"),
    )
    bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:', reply_markup=markup)



    @bot.callback_query_handler(func=lambda call: True)
    def callback_message(call):
        chat_id = call.message.chat.id

        if chat_id not in user_nicknames:
            bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")
            return

        nickname = user_nicknames[chat_id]

        if call.data == 'stats_overall':
            map_name = "overall"
        elif call.data.startswith("map_"):
            map_name = call.data[4:]
        else:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            return

        stats, error = get_player_stats(nickname, map_name)
        if error:
            bot.answer_callback_query(call.id, error)
            return

        text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {stats['nickname']} (–∫–∞—Ä—Ç–∞: {stats['map']}):\n"
                f"ELO: {stats['elo']}\n"
                f"K/D: {stats['kd_ratio']}\n"
                f"–í–∏–Ω—Ä–µ–π—Ç: {stats['winrate']} %\n"
                f"–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω –≥—Ä–∞–Ω–∞—Ç–∞–º–∏ –∑–∞ —Ä–∞—É–Ω–¥: {stats['utility_damage']} HP\n"
                f"–ú–∞—Ç—á–µ–π —Å—ã–≥—Ä–∞–Ω–æ: {stats['matches']}")

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=call.message.reply_markup
        )
        bot.answer_callback_query(call.id)


bot.polling(none_stop=True)
